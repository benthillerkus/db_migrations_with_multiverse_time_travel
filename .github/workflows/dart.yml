# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Dart

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.getpackages.outputs.paths }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: dart-lang/setup-dart@v1

      - id: getpackages
        run: |
          echo "paths=$(dart pub workspace list --json | jq -r -c '[.packages[] | select(.name != "workspace") | .path]' | sed 's|${{ github.workspace }}/||g')" >> $GITHUB_OUTPUT

  build:
    needs: packages
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        dart: ['3.5.4', stable]
        package: ${{ fromJson(needs.packages.outputs.packages) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.dart }}

      - name: Install sqlite3
        run: sudo apt install sqlite3 

      - name: Install dependencies
        run: dart pub get

      - name: Install coverage tool
        if: matrix.dart == 'stable'
        run: dart pub global activate coverage

      - name: Run tests
        if: matrix.dart != 'stable'
        working-directory: ${{ matrix.package }}
        run: dart test

      - name: Run tests with coverage
        if: matrix.dart == 'stable'
        working-directory: ${{ matrix.package }}
        timeout-minutes: 1
        run: |
            dart pub global run coverage:test_with_coverage --branch-coverage --function-coverage | tee /dev/tty | while read -r line; do
              if [[ "$line" == *"ðŸŽ‰"* ]]; then
                (sleep 2 && kill $(ps -ef | grep '[d]art' | awk '{print $2}') && echo killed dead process) &
                exit 0
              fi
            done

      - name: Check if coverage is generated
        if: matrix.dart == 'stable'
        working-directory: ${{ matrix.package }}
        run: test -f coverage/lcov.info

      - name: Upload coverage reports to Codecov
        if: matrix.dart == 'stable' && !failure()
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ${{ matrix.package }}/coverage
          flags: ${{ matrix.package }}

  check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      
      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: dart analyze

